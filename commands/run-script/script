#!/usr/bin/env bash
#
#/ command: mysql:run-script: "Run's the specified script file"
#
#/ usage: rerun mysql:run-script [ --user|-u <anthony>] [ --password|-p <>] [ --host|-h <localhost>] [ --port|-p <3306>]  --script|-s <> 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: USER PASSWORD HOST PORT SCRIPT

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library" ; exit 1 ; 
}

# Parse the command options.
[ -r $RERUN_MODULE_DIR/commands/run-script/options.sh ] && {
  . $RERUN_MODULE_DIR/commands/run-script/options.sh || exit 2 ;
}

# Exit immediately upon non-zero exit for simple commands. 
# See [set](http://ss64.com/bash/set.html)
# Pipelines return with exit code of left most command failure.
# See [pipelines](http://www.gnu.org/software/bash/manual/bash.html#Pipelines)
set -e -o pipefail


# ------------------------------
# Your implementation goes here.
# ------------------------------

# TODO: Need to allow for users that have no password (e.g. the root account on a fresh installation).
# TODO: Need to be able to be able to non-interactively supply a password other than via the command-line option (since that's insecure).
#if [[ -z $PASSWORD ]]
#then
  #read -rsp "password: " PASSWORD
  #echo
#fi

export MYSQL_PWD=${PASSWORD}
export MYSQL_HOST=${HOST}
export MYSQL_TCP_PORT=${PORT}

mysql -u $USER < $SCRIPT

exit $?

# Done
